/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package GradleProjDemo;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import com.example.service.EmployeeServiceImpl;
import com.example.service.IEmployeeService;
import com.google.common.base.Strings;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.RepeatedTest;
import org.junit.jupiter.api.Tag;

class LibraryTest {
	String str;

	int[] intArr = {10, 20, 30};
	
	
	static IEmployeeService empSer;
	@BeforeAll
	static void setUpBeforeClass() throws Exception {
		empSer = new EmployeeServiceImpl();
		System.out.println("BeforeAll");
	}

	@AfterAll
	static void tearDownAfterClass() throws Exception {
		System.out.println("AfterAll");
	}

	@BeforeEach
	void setUp() throws Exception {
		
		System.out.println("BeforeEach");
	}

	@AfterEach
	void tearDown() throws Exception {
		empSer = null;
		System.out.println("AfterEach");
	}

	@Test
	void test() {
		System.out.println("Test");
		//assertEquals(emp, empSer.addEmployee(emp));
		fail("Not yet implemented");
	}

	
    @Test
    @Tag("Smoke")
    void test1() {
    	System.out.println("Test1");
    	//assertEquals(10, Calc.add(10,10));
    }
    @Test
    @Tag("Smoke")
    void test2() {
    	System.out.println("Test2");
    	assertNotEquals(10, 11);
    }
    @Test
    @Disabled
    void test3() {
    	System.out.println("Test3");
    	//assertTrue(testObj.isOdd(10));
    }
    @Test
    void test4() {
    	System.out.println("Test4");
    	assertFalse(false);
    }
    @Test
    void test5() {
    	System.out.println("Test5");
    	assertNull(str);
    }
    @Test
    void test6() {
    	System.out.println("Test6");
    	assertNotNull(intArr);
    }
    @Test
    @DisplayName("MyTest")
    void test7() {
    	System.out.println("Test7");
    	assertArrayEquals(intArr, new int[]{10, 20, 30});
    }
    @Test
    @RepeatedTest(value=5)
    void test8() {
    	System.out.println("Test8");
    	Assertions.assertThrowsExactly(NullPointerException.class, ()->str.length());
    }
    @Test
    @ParameterizedTest
    @ValueSource(strings = {"", " "})
    void test9(String str) {
    	System.out.println("Test9");
    	assertTrue(str.isEmpty());
    }
    
    
}
